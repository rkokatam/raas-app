{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Desktop/my-app/src/VideoPlayer.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useRef } from 'react';\n\n// const VideoPlayer = () => {\n//   const [videoLink, setVideoLink] = useState('');\n//   const [comments, setComments] = useState([]);\n//   const videoRef = useRef(null);\n\n//   const handleVideoLinkChange = (event) => {\n//     setVideoLink(event.target.value);\n//   };\n\n//   const handleVideoSubmit = async (event) => {\n//     event.preventDefault();\n//     const videoId = extractVideoId(videoLink);\n\n//     if (videoId) {\n//       try {\n//         const videoDetails = await fetchVideoDetails(videoId);\n//         embedVideo(videoDetails);\n//       } catch (error) {\n//         console.log('Error fetching video details:', error);\n//       }\n//     } else {\n//       console.log('Invalid YouTube video link');\n//     }\n//   };\n\n//   const fetchVideoDetails = async (videoId) => {\n//     const response = await fetch(\n//       `https://www.googleapis.com/youtube/v3/videos?part=snippet&id=${videoId}&key=AIzaSyD--hwxU-ANmrurWpZ8qjfjbgKDOIZJNig`\n//     );\n//     const data = await response.json();\n\n//     if (data.items && data.items.length > 0) {\n//       return data.items[0];\n//     } else {\n//       throw new Error('Video details not found');\n//     }\n//   };\n\n//   const embedVideo = (videoDetails) => {\n//     const playerOptions = {\n//       videoId: videoDetails.id,\n//       playerVars: {\n//         autoplay: 0\n//       }\n//     };\n//     new window.YT.Player(videoRef.current, playerOptions);\n//   };\n\n//   const handleVideoStateChange = (event) => {\n//     if (event.data === window.YT.PlayerState.PAUSED) {\n//       const currentTime = event.target.getCurrentTime();\n//       promptComment(currentTime);\n//     }\n//   };\n\n//   const promptComment = (timestamp) => {\n//     const comment = prompt('Enter your comment:');\n//     if (comment) {\n//       const newComment = {\n//         timestamp: timestamp,\n//         text: comment\n//       };\n//       setComments([...comments, newComment]);\n//     }\n//   };\n\n//   const renderComments = () => {\n//     return comments.map((comment, index) => (\n//       <li key={index}>\n//         <a href={`https://www.youtube.com/watch?v=${extractVideoId(videoLink)}&t=${comment.timestamp}`} target=\"_blank\" rel=\"noopener noreferrer\">\n//           {comment.text}\n//         </a>\n//       </li>\n//     ));\n//   };\n\n//   const extractVideoId = (link) => {\n//     const videoIdMatch = link.match(/(?:[?&]v=|\\/embed\\/|\\/[0-9a-z_-]{11})([0-9a-z_-]{11})/i);\n//     return videoIdMatch ? videoIdMatch[1] : null;\n//   };\n\n//   return (\n//     <div>\n//       <form onSubmit={handleVideoSubmit}>\n//         <input\n//           type=\"text\"\n//           value={videoLink}\n//           onChange={handleVideoLinkChange}\n//           placeholder=\"Enter YouTube video link\"\n//         />\n//         <button type=\"submit\">Load Video</button>\n//       </form>\n//       <div ref={videoRef}></div>\n//       <ul>{renderComments()}</ul>\n//     </div>\n//   );\n// };\n\n// export default VideoPlayer;\n\nimport React, { useState, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VideoPlayer = () => {\n  _s();\n  const [videoLink, setVideoLink] = useState('');\n  const [comments, setComments] = useState([]);\n  const [videoLoaded, setVideoLoaded] = useState(false);\n  const videoRef = useRef(null);\n  const handleVideoLinkChange = event => {\n    setVideoLink(event.target.value);\n  };\n  const handleVideoSubmit = event => {\n    event.preventDefault();\n    setVideoLoaded(true);\n  };\n  const fetchVideoDetails = async videoId => {\n    const response = await fetch(`https://www.googleapis.com/youtube/v3/videos?part=snippet&id=${videoId}&key=AIzaSyD--hwxU-ANmrurWpZ8qjfjbgKDOIZJNig`);\n    const data = await response.json();\n    if (data.items && data.items.length > 0) {\n      return data.items[0];\n    } else {\n      throw new Error('Video details not found');\n    }\n  };\n  const handleVideoStateChange = event => {\n    if (event.data === window.YT.PlayerState.PAUSED) {\n      const currentTime = event.target.getCurrentTime();\n      promptComment(currentTime);\n    }\n  };\n  const promptComment = timestamp => {\n    const comment = prompt('Enter your comment:');\n    if (comment) {\n      const newComment = {\n        timestamp: timestamp,\n        text: comment\n      };\n      setComments([...comments, newComment]);\n    }\n  };\n  const renderComments = () => {\n    return comments.map((comment, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n      children: /*#__PURE__*/_jsxDEV(\"a\", {\n        href: `https://www.youtube.com/watch?v=${extractVideoId(videoLink)}&t=${comment.timestamp}`,\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        children: comment.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this));\n  };\n  const extractVideoId = link => {\n    const videoIdMatch = link.match(/(?:[?&]v=|\\/embed\\/|\\/[0-9a-z_-]{11})([0-9a-z_-]{11})/i);\n    return videoIdMatch ? videoIdMatch[1] : null;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleVideoSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: videoLink,\n        onChange: handleVideoLinkChange,\n        placeholder: \"Enter YouTube video link\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Load Video\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }, this), videoLoaded && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        ref: videoRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: renderComments()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 167,\n    columnNumber: 5\n  }, this);\n};\n_s(VideoPlayer, \"AvCWuUC7/cZIBjrJL7+/u5V+ooI=\");\n_c = VideoPlayer;\nexport default VideoPlayer;\nvar _c;\n$RefreshReg$(_c, \"VideoPlayer\");","map":{"version":3,"names":["React","useState","useRef","jsxDEV","_jsxDEV","VideoPlayer","_s","videoLink","setVideoLink","comments","setComments","videoLoaded","setVideoLoaded","videoRef","handleVideoLinkChange","event","target","value","handleVideoSubmit","preventDefault","fetchVideoDetails","videoId","response","fetch","data","json","items","length","Error","handleVideoStateChange","window","YT","PlayerState","PAUSED","currentTime","getCurrentTime","promptComment","timestamp","comment","prompt","newComment","text","renderComments","map","index","children","href","extractVideoId","rel","fileName","_jsxFileName","lineNumber","columnNumber","link","videoIdMatch","match","onSubmit","type","onChange","placeholder","ref","_c","$RefreshReg$"],"sources":["/Users/admin/Desktop/my-app/src/VideoPlayer.js"],"sourcesContent":["// import React, { useState, useRef } from 'react';\n\n// const VideoPlayer = () => {\n//   const [videoLink, setVideoLink] = useState('');\n//   const [comments, setComments] = useState([]);\n//   const videoRef = useRef(null);\n\n//   const handleVideoLinkChange = (event) => {\n//     setVideoLink(event.target.value);\n//   };\n\n//   const handleVideoSubmit = async (event) => {\n//     event.preventDefault();\n//     const videoId = extractVideoId(videoLink);\n\n//     if (videoId) {\n//       try {\n//         const videoDetails = await fetchVideoDetails(videoId);\n//         embedVideo(videoDetails);\n//       } catch (error) {\n//         console.log('Error fetching video details:', error);\n//       }\n//     } else {\n//       console.log('Invalid YouTube video link');\n//     }\n//   };\n\n//   const fetchVideoDetails = async (videoId) => {\n//     const response = await fetch(\n//       `https://www.googleapis.com/youtube/v3/videos?part=snippet&id=${videoId}&key=AIzaSyD--hwxU-ANmrurWpZ8qjfjbgKDOIZJNig`\n//     );\n//     const data = await response.json();\n\n//     if (data.items && data.items.length > 0) {\n//       return data.items[0];\n//     } else {\n//       throw new Error('Video details not found');\n//     }\n//   };\n\n//   const embedVideo = (videoDetails) => {\n//     const playerOptions = {\n//       videoId: videoDetails.id,\n//       playerVars: {\n//         autoplay: 0\n//       }\n//     };\n//     new window.YT.Player(videoRef.current, playerOptions);\n//   };\n\n//   const handleVideoStateChange = (event) => {\n//     if (event.data === window.YT.PlayerState.PAUSED) {\n//       const currentTime = event.target.getCurrentTime();\n//       promptComment(currentTime);\n//     }\n//   };\n\n//   const promptComment = (timestamp) => {\n//     const comment = prompt('Enter your comment:');\n//     if (comment) {\n//       const newComment = {\n//         timestamp: timestamp,\n//         text: comment\n//       };\n//       setComments([...comments, newComment]);\n//     }\n//   };\n\n//   const renderComments = () => {\n//     return comments.map((comment, index) => (\n//       <li key={index}>\n//         <a href={`https://www.youtube.com/watch?v=${extractVideoId(videoLink)}&t=${comment.timestamp}`} target=\"_blank\" rel=\"noopener noreferrer\">\n//           {comment.text}\n//         </a>\n//       </li>\n//     ));\n//   };\n\n//   const extractVideoId = (link) => {\n//     const videoIdMatch = link.match(/(?:[?&]v=|\\/embed\\/|\\/[0-9a-z_-]{11})([0-9a-z_-]{11})/i);\n//     return videoIdMatch ? videoIdMatch[1] : null;\n//   };\n\n//   return (\n//     <div>\n//       <form onSubmit={handleVideoSubmit}>\n//         <input\n//           type=\"text\"\n//           value={videoLink}\n//           onChange={handleVideoLinkChange}\n//           placeholder=\"Enter YouTube video link\"\n//         />\n//         <button type=\"submit\">Load Video</button>\n//       </form>\n//       <div ref={videoRef}></div>\n//       <ul>{renderComments()}</ul>\n//     </div>\n//   );\n// };\n\n// export default VideoPlayer;\n\nimport React, { useState, useRef } from 'react';\n\nconst VideoPlayer = () => {\n  const [videoLink, setVideoLink] = useState('');\n  const [comments, setComments] = useState([]);\n  const [videoLoaded, setVideoLoaded] = useState(false);\n  const videoRef = useRef(null);\n\n  const handleVideoLinkChange = (event) => {\n    setVideoLink(event.target.value);\n  };\n\n  const handleVideoSubmit = (event) => {\n    event.preventDefault();\n    setVideoLoaded(true);\n  };\n\n    const fetchVideoDetails = async (videoId) => {\n    const response = await fetch(\n        `https://www.googleapis.com/youtube/v3/videos?part=snippet&id=${videoId}&key=AIzaSyD--hwxU-ANmrurWpZ8qjfjbgKDOIZJNig`\n    );\n    const data = await response.json();\n\n    if (data.items && data.items.length > 0) {\n        return data.items[0];\n    } else {\n        throw new Error('Video details not found');\n    }\n    };\n\n  const handleVideoStateChange = (event) => {\n    if (event.data === window.YT.PlayerState.PAUSED) {\n      const currentTime = event.target.getCurrentTime();\n      promptComment(currentTime);\n    }\n  };\n\n  const promptComment = (timestamp) => {\n    const comment = prompt('Enter your comment:');\n    if (comment) {\n      const newComment = {\n        timestamp: timestamp,\n        text: comment\n      };\n      setComments([...comments, newComment]);\n    }\n  };\n\n  const renderComments = () => {\n    return comments.map((comment, index) => (\n      <li key={index}>\n        <a href={`https://www.youtube.com/watch?v=${extractVideoId(videoLink)}&t=${comment.timestamp}`} target=\"_blank\" rel=\"noopener noreferrer\">\n          {comment.text}\n        </a>\n      </li>\n    ));\n  };\n\n  const extractVideoId = (link) => {\n    const videoIdMatch = link.match(/(?:[?&]v=|\\/embed\\/|\\/[0-9a-z_-]{11})([0-9a-z_-]{11})/i);\n    return videoIdMatch ? videoIdMatch[1] : null;\n  };\n\n  return (\n    <div>\n      <form onSubmit={handleVideoSubmit}>\n        <input\n          type=\"text\"\n          value={videoLink}\n          onChange={handleVideoLinkChange}\n          placeholder=\"Enter YouTube video link\"\n        />\n        <button type=\"submit\">Load Video</button>\n      </form>\n      {videoLoaded && (\n        <div>\n          <div ref={videoRef}></div>\n          <ul>{renderComments()}</ul>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default VideoPlayer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}