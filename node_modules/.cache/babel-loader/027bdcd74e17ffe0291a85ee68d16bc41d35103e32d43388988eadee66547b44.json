{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Desktop/my-app/src/VideoPlayer.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useRef } from 'react';\n\n// const VideoPlayer = () => {\n//   const [videoLink, setVideoLink] = useState('');\n//   const [comments, setComments] = useState([]);\n//   const videoRef = useRef(null);\n\n//   const handleVideoLinkChange = (event) => {\n//     setVideoLink(event.target.value);\n//   };\n\n//   const handleVideoSubmit = (event) => {\n//     event.preventDefault();\n//     // Extract video ID from the YouTube link\n//     const videoId = extractVideoId(videoLink);\n//     if (videoId) {\n//       // Load YouTube iframe API\n//       const tag = document.createElement('script');\n//       tag.src = 'https://www.youtube.com/iframe_api';\n//       const firstScriptTag = document.getElementsByTagName('script')[0];\n//       firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n\n//       window.onYouTubeIframeAPIReady = () => {\n//         new window.YT.Player(videoRef.current, {\n//           videoId: videoId,\n//           events: {\n//             onStateChange: handleVideoStateChange\n//           }\n//         });\n//       };\n//     } else {\n//       alert('Invalid YouTube video link!');\n//     }\n//   };\n\n//   const handleVideoStateChange = (event) => {\n//     // Listen for video playback events (e.g., pause, play)\n//     if (event.data === window.YT.PlayerState.PAUSED) {\n//       const currentTime = event.target.getCurrentTime();\n//       promptComment(currentTime);\n//     }\n//   };\n\n//   const promptComment = (timestamp) => {\n//     const comment = prompt('Enter your comment:');\n//     if (comment) {\n//       const newComment = {\n//         timestamp: timestamp,\n//         text: comment\n//       };\n//       setComments([...comments, newComment]);\n//     }\n//   };\n\n//   const renderComments = () => {\n//     return comments.map((comment, index) => (\n//       <li key={index}>\n//         <a href={`https://www.youtube.com/watch?v=${extractVideoId(videoLink)}&t=${comment.timestamp}`} target=\"_blank\" rel=\"noopener noreferrer\">\n//           {comment.text}\n//         </a>\n//       </li>\n//     ));\n//   };\n\n//   // Helper function to extract video ID from YouTube link\n//   const extractVideoId = (link) => {\n//     const videoIdMatch = link.match(/(?:[?&]v=|\\/embed\\/|\\/[0-9a-z_-]{11})([0-9a-z_-]{11})/i);\n//     const unlistedIdMatch = link.match(/\\/v\\/([0-9a-z_-]{11})/i);\n//     return videoIdMatch ? videoIdMatch[1] : unlistedIdMatch ? unlistedIdMatch[1] : null;\n//   };\n\n//   return (\n//     <div>\n//       <form onSubmit={handleVideoSubmit}>\n//         <input\n//           type=\"text\"\n//           value={videoLink}\n//           onChange={handleVideoLinkChange}\n//           placeholder=\"Enter YouTube video link\"\n//         />\n//         <button type=\"submit\">Load Video</button>\n//       </form>\n//       <div ref={videoRef}></div>\n//       <ul>{renderComments()}</ul>\n//     </div>\n//   );\n// };\n\n// export default VideoPlayer;\n\n// import React, { useState, useRef } from 'react';\n\n// const VideoPlayer = () => {\n//   const [videoLink, setVideoLink] = useState('');\n//   const [comments, setComments] = useState([]);\n//   const videoRef = useRef(null);\n\n//   const handleVideoLinkChange = (event) => {\n//     setVideoLink(event.target.value);\n//   };\n\n//   const handleVideoSubmit = (event) => {\n//     event.preventDefault();\n//     // Extract video ID from the YouTube link\n//     const videoId = extractVideoId(videoLink);\n//     if (videoId) {\n//       fetchVideoDetails(videoId);\n//     } else {\n//       alert('Invalid YouTube video link!');\n//     }\n//   };\n\n//   const fetchVideoDetails = async (videoId) => {\n//     const apiKey = 'AIzaSyD--hwxU-ANmrurWpZ8qjfjbgKDOIZJNig'; // Replace with your YouTube Data API key\n//     const response = await fetch(`https://www.googleapis.com/youtube/v3/videos?part=snippet&id=${videoId}&key=${apiKey}`);\n//     const data = await response.json();\n//     if (data.items.length > 0) {\n//       loadVideoPlayer(videoId);\n//     } else {\n//       alert('Failed to fetch video details!');\n//     }\n//   };\n\n//   const loadVideoPlayer = (videoId) => {\n//     // Load YouTube iframe API\n//     const tag = document.createElement('script');\n//     tag.src = 'https://www.youtube.com/iframe_api';\n//     const firstScriptTag = document.getElementsByTagName('script')[0];\n//     firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n\n//     window.onYouTubeIframeAPIReady = () => {\n//       new window.YT.Player(videoRef.current, {\n//         videoId: videoId,\n//         events: {\n//           onStateChange: handleVideoStateChange\n//         }\n//       });\n//     };\n//   };\n\n//   const handleVideoStateChange = (event) => {\n//     // Listen for video playback events (e.g., pause, play)\n//     if (event.data === window.YT.PlayerState.PAUSED) {\n//       const currentTime = event.target.getCurrentTime();\n//       promptComment(currentTime);\n//     }\n//   };\n\n//   const promptComment = (timestamp) => {\n//     const comment = prompt('Enter your comment:');\n//     if (comment) {\n//       const newComment = {\n//         timestamp: timestamp,\n//         text: comment\n//       };\n//       setComments([...comments, newComment]);\n//     }\n//   };\n\n//   const renderComments = () => {\n//     return comments.map((comment, index) => (\n//       <li key={index}>\n//         <a href={`https://www.youtube.com/watch?v=${extractVideoId(videoLink)}&t=${comment.timestamp}`} target=\"_blank\" rel=\"noopener noreferrer\">\n//           {comment.text}\n//         </a>\n//       </li>\n//     ));\n//   };\n\n//   // Helper function to extract video ID from YouTube link\n//   const extractVideoId = (link) => {\n//     const videoIdMatch = link.match(/(?:[?&]v=|\\/embed\\/|\\/[0-9a-z_-]{11})([0-9a-z_-]{11})/i);\n//     const unlistedIdMatch = link.match(/\\/v\\/([0-9a-z_-]{11})/i);\n//     return videoIdMatch ? videoIdMatch[1] : unlistedIdMatch ? unlistedIdMatch[1] : null;\n//   };\n\n//   return (\n//     <div>\n//       <form onSubmit={handleVideoSubmit}>\n//         <input\n//           type=\"text\"\n//           value={videoLink}\n//           onChange={handleVideoLinkChange}\n//           placeholder=\"Enter YouTube video link\"\n//         />\n//         <button type=\"submit\">Load Video</button>\n//       </form>\n//       <div ref={videoRef}></div>\n//       <ul>{renderComments()}</ul>\n//     </div>\n//   );\n// };\n\n// export default VideoPlayer;\n\nimport React, { useState, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VideoPlayer = () => {\n  _s();\n  const [videoLink, setVideoLink] = useState('');\n  const [comments, setComments] = useState([]);\n  const videoRef = useRef(null);\n  const handleVideoLinkChange = event => {\n    setVideoLink(event.target.value);\n  };\n  const handleVideoSubmit = event => {\n    event.preventDefault();\n    // Extract video ID from the YouTube link\n    const videoId = extractVideoId(videoLink);\n    if (videoId) {\n      fetchVideoDetails(videoId);\n    } else {\n      alert('Invalid YouTube video link!');\n    }\n  };\n  const fetchVideoDetails = async videoId => {\n    const apiKey = 'AIzaSyD--hwxU-ANmrurWpZ8qjfjbgKDOIZJNig'; // Replace with your YouTube Data API key\n    const response = await fetch(`https://www.googleapis.com/youtube/v3/videos?part=snippet&id=${videoId}&key=${apiKey}`);\n    const data = await response.json();\n    if (data.items.length > 0) {\n      loadVideoPlayer(videoId);\n    } else {\n      alert('Failed to fetch video details!');\n    }\n  };\n  const loadVideoPlayer = videoId => {\n    // Load YouTube iframe API\n    const tag = document.createElement('script');\n    tag.src = 'https://www.youtube.com/iframe_api';\n    const firstScriptTag = document.getElementsByTagName('script')[0];\n    firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n    window.onYouTubeIframeAPIReady = () => {\n      new window.YT.Player(videoRef.current, {\n        videoId: videoId,\n        events: {\n          onStateChange: handleVideoStateChange\n        }\n      });\n    };\n  };\n  const handleVideoStateChange = event => {\n    // Listen for video playback events (e.g., pause, play)\n    if (event.data === window.YT.PlayerState.PAUSED) {\n      const currentTime = event.target.getCurrentTime();\n      promptComment(currentTime);\n    }\n  };\n  const promptComment = timestamp => {\n    const comment = prompt('Enter your comment:');\n    if (comment) {\n      const newComment = {\n        timestamp: timestamp,\n        text: comment\n      };\n      setComments([...comments, newComment]);\n    }\n  };\n  const renderComments = () => {\n    return comments.map((comment, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n      children: /*#__PURE__*/_jsxDEV(\"a\", {\n        href: `https://www.youtube.com/watch?v=${extractVideoId(videoLink)}&t=${comment.timestamp}`,\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        children: comment.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 9\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 7\n    }, this));\n  };\n\n  // Helper function to extract video ID from YouTube link\n  const extractVideoId = link => {\n    const videoIdMatch = link.match(/(?:[?&]v=|\\/embed\\/|\\/[0-9a-z_-]{11})([0-9a-z_-]{11})/i);\n    const unlistedIdMatch = link.match(/\\/v\\/([0-9a-z_-]{11})/i);\n    return videoIdMatch ? videoIdMatch[1] : unlistedIdMatch ? unlistedIdMatch[1] : null;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleVideoSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: videoLink,\n        onChange: handleVideoLinkChange,\n        placeholder: \"Enter YouTube video link\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Load Video\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: videoRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Comments\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 9\n      }, this), comments.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: comments.map((comment, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"a\", {\n            href: `https://www.youtube.com/watch?v=${extractVideoId(videoLink)}&t=${comment.timestamp}`,\n            target: \"_blank\",\n            rel: \"noopener noreferrer\",\n            children: comment.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 301,\n            columnNumber: 17\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No comments yet.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 284,\n    columnNumber: 5\n  }, this);\n};\n_s(VideoPlayer, \"wBKnpCU5THwrw9drBEtZ50F5fZo=\");\n_c = VideoPlayer;\nexport default VideoPlayer;\nvar _c;\n$RefreshReg$(_c, \"VideoPlayer\");","map":{"version":3,"names":["React","useState","useRef","jsxDEV","_jsxDEV","VideoPlayer","_s","videoLink","setVideoLink","comments","setComments","videoRef","handleVideoLinkChange","event","target","value","handleVideoSubmit","preventDefault","videoId","extractVideoId","fetchVideoDetails","alert","apiKey","response","fetch","data","json","items","length","loadVideoPlayer","tag","document","createElement","src","firstScriptTag","getElementsByTagName","parentNode","insertBefore","window","onYouTubeIframeAPIReady","YT","Player","current","events","onStateChange","handleVideoStateChange","PlayerState","PAUSED","currentTime","getCurrentTime","promptComment","timestamp","comment","prompt","newComment","text","renderComments","map","index","children","href","rel","fileName","_jsxFileName","lineNumber","columnNumber","link","videoIdMatch","match","unlistedIdMatch","onSubmit","type","onChange","placeholder","ref","_c","$RefreshReg$"],"sources":["/Users/admin/Desktop/my-app/src/VideoPlayer.js"],"sourcesContent":["// import React, { useState, useRef } from 'react';\n\n// const VideoPlayer = () => {\n//   const [videoLink, setVideoLink] = useState('');\n//   const [comments, setComments] = useState([]);\n//   const videoRef = useRef(null);\n\n//   const handleVideoLinkChange = (event) => {\n//     setVideoLink(event.target.value);\n//   };\n\n//   const handleVideoSubmit = (event) => {\n//     event.preventDefault();\n//     // Extract video ID from the YouTube link\n//     const videoId = extractVideoId(videoLink);\n//     if (videoId) {\n//       // Load YouTube iframe API\n//       const tag = document.createElement('script');\n//       tag.src = 'https://www.youtube.com/iframe_api';\n//       const firstScriptTag = document.getElementsByTagName('script')[0];\n//       firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n\n//       window.onYouTubeIframeAPIReady = () => {\n//         new window.YT.Player(videoRef.current, {\n//           videoId: videoId,\n//           events: {\n//             onStateChange: handleVideoStateChange\n//           }\n//         });\n//       };\n//     } else {\n//       alert('Invalid YouTube video link!');\n//     }\n//   };\n\n//   const handleVideoStateChange = (event) => {\n//     // Listen for video playback events (e.g., pause, play)\n//     if (event.data === window.YT.PlayerState.PAUSED) {\n//       const currentTime = event.target.getCurrentTime();\n//       promptComment(currentTime);\n//     }\n//   };\n\n//   const promptComment = (timestamp) => {\n//     const comment = prompt('Enter your comment:');\n//     if (comment) {\n//       const newComment = {\n//         timestamp: timestamp,\n//         text: comment\n//       };\n//       setComments([...comments, newComment]);\n//     }\n//   };\n\n//   const renderComments = () => {\n//     return comments.map((comment, index) => (\n//       <li key={index}>\n//         <a href={`https://www.youtube.com/watch?v=${extractVideoId(videoLink)}&t=${comment.timestamp}`} target=\"_blank\" rel=\"noopener noreferrer\">\n//           {comment.text}\n//         </a>\n//       </li>\n//     ));\n//   };\n\n//   // Helper function to extract video ID from YouTube link\n//   const extractVideoId = (link) => {\n//     const videoIdMatch = link.match(/(?:[?&]v=|\\/embed\\/|\\/[0-9a-z_-]{11})([0-9a-z_-]{11})/i);\n//     const unlistedIdMatch = link.match(/\\/v\\/([0-9a-z_-]{11})/i);\n//     return videoIdMatch ? videoIdMatch[1] : unlistedIdMatch ? unlistedIdMatch[1] : null;\n//   };\n\n//   return (\n//     <div>\n//       <form onSubmit={handleVideoSubmit}>\n//         <input\n//           type=\"text\"\n//           value={videoLink}\n//           onChange={handleVideoLinkChange}\n//           placeholder=\"Enter YouTube video link\"\n//         />\n//         <button type=\"submit\">Load Video</button>\n//       </form>\n//       <div ref={videoRef}></div>\n//       <ul>{renderComments()}</ul>\n//     </div>\n//   );\n// };\n\n// export default VideoPlayer;\n\n// import React, { useState, useRef } from 'react';\n\n// const VideoPlayer = () => {\n//   const [videoLink, setVideoLink] = useState('');\n//   const [comments, setComments] = useState([]);\n//   const videoRef = useRef(null);\n\n//   const handleVideoLinkChange = (event) => {\n//     setVideoLink(event.target.value);\n//   };\n\n//   const handleVideoSubmit = (event) => {\n//     event.preventDefault();\n//     // Extract video ID from the YouTube link\n//     const videoId = extractVideoId(videoLink);\n//     if (videoId) {\n//       fetchVideoDetails(videoId);\n//     } else {\n//       alert('Invalid YouTube video link!');\n//     }\n//   };\n\n//   const fetchVideoDetails = async (videoId) => {\n//     const apiKey = 'AIzaSyD--hwxU-ANmrurWpZ8qjfjbgKDOIZJNig'; // Replace with your YouTube Data API key\n//     const response = await fetch(`https://www.googleapis.com/youtube/v3/videos?part=snippet&id=${videoId}&key=${apiKey}`);\n//     const data = await response.json();\n//     if (data.items.length > 0) {\n//       loadVideoPlayer(videoId);\n//     } else {\n//       alert('Failed to fetch video details!');\n//     }\n//   };\n\n//   const loadVideoPlayer = (videoId) => {\n//     // Load YouTube iframe API\n//     const tag = document.createElement('script');\n//     tag.src = 'https://www.youtube.com/iframe_api';\n//     const firstScriptTag = document.getElementsByTagName('script')[0];\n//     firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n\n//     window.onYouTubeIframeAPIReady = () => {\n//       new window.YT.Player(videoRef.current, {\n//         videoId: videoId,\n//         events: {\n//           onStateChange: handleVideoStateChange\n//         }\n//       });\n//     };\n//   };\n\n//   const handleVideoStateChange = (event) => {\n//     // Listen for video playback events (e.g., pause, play)\n//     if (event.data === window.YT.PlayerState.PAUSED) {\n//       const currentTime = event.target.getCurrentTime();\n//       promptComment(currentTime);\n//     }\n//   };\n\n//   const promptComment = (timestamp) => {\n//     const comment = prompt('Enter your comment:');\n//     if (comment) {\n//       const newComment = {\n//         timestamp: timestamp,\n//         text: comment\n//       };\n//       setComments([...comments, newComment]);\n//     }\n//   };\n\n//   const renderComments = () => {\n//     return comments.map((comment, index) => (\n//       <li key={index}>\n//         <a href={`https://www.youtube.com/watch?v=${extractVideoId(videoLink)}&t=${comment.timestamp}`} target=\"_blank\" rel=\"noopener noreferrer\">\n//           {comment.text}\n//         </a>\n//       </li>\n//     ));\n//   };\n\n//   // Helper function to extract video ID from YouTube link\n//   const extractVideoId = (link) => {\n//     const videoIdMatch = link.match(/(?:[?&]v=|\\/embed\\/|\\/[0-9a-z_-]{11})([0-9a-z_-]{11})/i);\n//     const unlistedIdMatch = link.match(/\\/v\\/([0-9a-z_-]{11})/i);\n//     return videoIdMatch ? videoIdMatch[1] : unlistedIdMatch ? unlistedIdMatch[1] : null;\n//   };\n\n//   return (\n//     <div>\n//       <form onSubmit={handleVideoSubmit}>\n//         <input\n//           type=\"text\"\n//           value={videoLink}\n//           onChange={handleVideoLinkChange}\n//           placeholder=\"Enter YouTube video link\"\n//         />\n//         <button type=\"submit\">Load Video</button>\n//       </form>\n//       <div ref={videoRef}></div>\n//       <ul>{renderComments()}</ul>\n//     </div>\n//   );\n// };\n\n// export default VideoPlayer;\n\n\nimport React, { useState, useRef } from 'react';\n\nconst VideoPlayer = () => {\n  const [videoLink, setVideoLink] = useState('');\n  const [comments, setComments] = useState([]);\n  const videoRef = useRef(null);\n\n  const handleVideoLinkChange = (event) => {\n    setVideoLink(event.target.value);\n  };\n\n  const handleVideoSubmit = (event) => {\n    event.preventDefault();\n    // Extract video ID from the YouTube link\n    const videoId = extractVideoId(videoLink);\n    if (videoId) {\n      fetchVideoDetails(videoId);\n    } else {\n      alert('Invalid YouTube video link!');\n    }\n  };\n\n  const fetchVideoDetails = async (videoId) => {\n    const apiKey = 'AIzaSyD--hwxU-ANmrurWpZ8qjfjbgKDOIZJNig'; // Replace with your YouTube Data API key\n    const response = await fetch(`https://www.googleapis.com/youtube/v3/videos?part=snippet&id=${videoId}&key=${apiKey}`);\n    const data = await response.json();\n    if (data.items.length > 0) {\n      loadVideoPlayer(videoId);\n    } else {\n      alert('Failed to fetch video details!');\n    }\n  };\n\n  const loadVideoPlayer = (videoId) => {\n    // Load YouTube iframe API\n    const tag = document.createElement('script');\n    tag.src = 'https://www.youtube.com/iframe_api';\n    const firstScriptTag = document.getElementsByTagName('script')[0];\n    firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n\n    window.onYouTubeIframeAPIReady = () => {\n      new window.YT.Player(videoRef.current, {\n        videoId: videoId,\n        events: {\n          onStateChange: handleVideoStateChange\n        }\n      });\n    };\n  };\n\n  const handleVideoStateChange = (event) => {\n    // Listen for video playback events (e.g., pause, play)\n    if (event.data === window.YT.PlayerState.PAUSED) {\n      const currentTime = event.target.getCurrentTime();\n      promptComment(currentTime);\n    }\n  };\n\n  const promptComment = (timestamp) => {\n    const comment = prompt('Enter your comment:');\n    if (comment) {\n      const newComment = {\n        timestamp: timestamp,\n        text: comment\n      };\n      setComments([...comments, newComment]);\n    }\n  };\n\n  const renderComments = () => {\n    return comments.map((comment, index) => (\n      <li key={index}>\n        <a href={`https://www.youtube.com/watch?v=${extractVideoId(videoLink)}&t=${comment.timestamp}`} target=\"_blank\" rel=\"noopener noreferrer\">\n          {comment.text}\n        </a>\n      </li>\n    ));\n  };\n\n  // Helper function to extract video ID from YouTube link\n  const extractVideoId = (link) => {\n    const videoIdMatch = link.match(/(?:[?&]v=|\\/embed\\/|\\/[0-9a-z_-]{11})([0-9a-z_-]{11})/i);\n    const unlistedIdMatch = link.match(/\\/v\\/([0-9a-z_-]{11})/i);\n    return videoIdMatch ? videoIdMatch[1] : unlistedIdMatch ? unlistedIdMatch[1] : null;\n  };\n\n  return (\n    <div>\n      <form onSubmit={handleVideoSubmit}>\n        <input\n          type=\"text\"\n          value={videoLink}\n          onChange={handleVideoLinkChange}\n          placeholder=\"Enter YouTube video link\"\n        />\n        <button type=\"submit\">Load Video</button>\n      </form>\n      <div ref={videoRef}></div>\n      <div>\n        <h2>Comments</h2>\n        {comments.length > 0 ? (\n          <ul>\n            {comments.map((comment, index) => (\n              <li key={index}>\n                <a href={`https://www.youtube.com/watch?v=${extractVideoId(videoLink)}&t=${comment.timestamp}`} target=\"_blank\" rel=\"noopener noreferrer\">\n                  {comment.text}\n                </a>\n              </li>\n            ))}\n          </ul>\n        ) : (\n          <p>No comments yet.</p>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default VideoPlayer;\n"],"mappings":";;AAAA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhD,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACQ,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAMU,QAAQ,GAAGT,MAAM,CAAC,IAAI,CAAC;EAE7B,MAAMU,qBAAqB,GAAIC,KAAK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"},"metadata":{},"sourceType":"module","externalDependencies":[]}