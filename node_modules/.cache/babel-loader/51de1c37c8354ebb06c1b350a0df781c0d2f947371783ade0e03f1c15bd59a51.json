{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Desktop/my-app/src/VideoPlayer.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VideoPlayer = () => {\n  _s();\n  const [videoLink, setVideoLink] = useState('');\n  const [comments, setComments] = useState([]);\n  const [inputComment, setInputComment] = useState('');\n  const videoRef = useRef(null);\n  const handleVideoLinkChange = event => {\n    setVideoLink(event.target.value);\n  };\n  const handleVideoSubmit = event => {\n    event.preventDefault();\n    // Extract video ID from the YouTube link\n    const videoId = extractVideoId(videoLink);\n    if (videoId) {\n      fetchVideoDetails(videoId);\n    } else {\n      alert('Invalid YouTube video link!');\n    }\n  };\n  const fetchVideoDetails = async videoId => {\n    const apiKey = 'AIzaSyD--hwxU-ANmrurWpZ8qjfjbgKDOIZJNig'; // Replace with your YouTube Data API key\n    const response = await fetch(`https://www.googleapis.com/youtube/v3/videos?part=snippet&id=${videoId}&key=${apiKey}`);\n    const data = await response.json();\n    if (data.items.length > 0) {\n      loadVideoPlayer(videoId);\n    } else {\n      alert('Failed to fetch video details!');\n    }\n  };\n  const loadVideoPlayer = videoId => {\n    // Load YouTube iframe API\n    const tag = document.createElement('script');\n    tag.src = 'https://www.youtube.com/iframe_api';\n    const firstScriptTag = document.getElementsByTagName('script')[0];\n    firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n    window.onYouTubeIframeAPIReady = () => {\n      new window.YT.Player(videoRef.current, {\n        videoId: videoId,\n        events: {\n          onStateChange: handleVideoStateChange\n        }\n      });\n    };\n  };\n  const handleVideoStateChange = event => {\n    // Listen for video playback events (e.g., pause, play)\n    if (event.data === window.YT.PlayerState.PAUSED) {\n      const currentTime = event.target.getCurrentTime();\n      promptComment(currentTime);\n    }\n  };\n  const promptComment = timestamp => {\n    const comment = prompt('Enter your comment:');\n    if (comment) {\n      const newComment = {\n        timestamp: parseFloat(timestamp),\n        text: comment\n      };\n      setComments(prevComments => [...prevComments, newComment]);\n    }\n  };\n  const handleCommentChange = event => {\n    setInputComment(event.target.value);\n  };\n  const handleSubmitComment = event => {\n    event.preventDefault();\n    if (inputComment.trim() !== '') {\n      const newComment = {\n        timestamp: 0,\n        text: inputComment\n      };\n      setComments(prevComments => [...prevComments, newComment]);\n      setInputComment('');\n    }\n  };\n  const renderComments = () => {\n    return comments.map((comment, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n      children: /*#__PURE__*/_jsxDEV(\"a\", {\n        href: `https://www.youtube.com/watch?v=${extractVideoId(videoLink)}&t=${comment.timestamp}`,\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        children: comment.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this));\n  };\n\n  // Helper function to extract video ID from YouTube link\n  const extractVideoId = link => {\n    const videoIdMatch = link.match(/(?:[?&]v=|\\/embed\\/|\\/[0-9a-z_-]{11})([0-9a-z_-]{11})/i);\n    const unlistedIdMatch = link.match(/\\/v\\/([0-9a-z_-]{11})/i);\n    return videoIdMatch ? videoIdMatch[1] : unlistedIdMatch ? unlistedIdMatch[1] : null;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleVideoSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: videoLink,\n        onChange: handleVideoLinkChange,\n        placeholder: \"Enter YouTube video link\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Load Video\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: videoRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: renderComments()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmitComment,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: inputComment,\n        onChange: handleCommentChange,\n        placeholder: \"Enter your comment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Add Comment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n};\n_s(VideoPlayer, \"hzW5J4WkXIlPPSGGJedIV7WokdM=\");\n_c = VideoPlayer;\nexport default VideoPlayer;\nvar _c;\n$RefreshReg$(_c, \"VideoPlayer\");","map":{"version":3,"names":["React","useState","useRef","jsxDEV","_jsxDEV","VideoPlayer","_s","videoLink","setVideoLink","comments","setComments","inputComment","setInputComment","videoRef","handleVideoLinkChange","event","target","value","handleVideoSubmit","preventDefault","videoId","extractVideoId","fetchVideoDetails","alert","apiKey","response","fetch","data","json","items","length","loadVideoPlayer","tag","document","createElement","src","firstScriptTag","getElementsByTagName","parentNode","insertBefore","window","onYouTubeIframeAPIReady","YT","Player","current","events","onStateChange","handleVideoStateChange","PlayerState","PAUSED","currentTime","getCurrentTime","promptComment","timestamp","comment","prompt","newComment","parseFloat","text","prevComments","handleCommentChange","handleSubmitComment","trim","renderComments","map","index","children","href","rel","fileName","_jsxFileName","lineNumber","columnNumber","link","videoIdMatch","match","unlistedIdMatch","onSubmit","type","onChange","placeholder","ref","_c","$RefreshReg$"],"sources":["/Users/admin/Desktop/my-app/src/VideoPlayer.js"],"sourcesContent":["import React, { useState, useRef } from 'react';\n\nconst VideoPlayer = () => {\n  const [videoLink, setVideoLink] = useState('');\n  const [comments, setComments] = useState([]);\n  const [inputComment, setInputComment] = useState('');\n  const videoRef = useRef(null);\n\n  const handleVideoLinkChange = (event) => {\n    setVideoLink(event.target.value);\n  };\n\n  const handleVideoSubmit = (event) => {\n    event.preventDefault();\n    // Extract video ID from the YouTube link\n    const videoId = extractVideoId(videoLink);\n    if (videoId) {\n      fetchVideoDetails(videoId);\n    } else {\n      alert('Invalid YouTube video link!');\n    }\n  };\n\n  const fetchVideoDetails = async (videoId) => {\n    const apiKey = 'AIzaSyD--hwxU-ANmrurWpZ8qjfjbgKDOIZJNig'; // Replace with your YouTube Data API key\n    const response = await fetch(`https://www.googleapis.com/youtube/v3/videos?part=snippet&id=${videoId}&key=${apiKey}`);\n    const data = await response.json();\n    if (data.items.length > 0) {\n      loadVideoPlayer(videoId);\n    } else {\n      alert('Failed to fetch video details!');\n    }\n  };\n\n  const loadVideoPlayer = (videoId) => {\n    // Load YouTube iframe API\n    const tag = document.createElement('script');\n    tag.src = 'https://www.youtube.com/iframe_api';\n    const firstScriptTag = document.getElementsByTagName('script')[0];\n    firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n\n    window.onYouTubeIframeAPIReady = () => {\n      new window.YT.Player(videoRef.current, {\n        videoId: videoId,\n        events: {\n          onStateChange: handleVideoStateChange\n        }\n      });\n    };\n  };\n\n  const handleVideoStateChange = (event) => {\n    // Listen for video playback events (e.g., pause, play)\n    if (event.data === window.YT.PlayerState.PAUSED) {\n      const currentTime = event.target.getCurrentTime();\n      promptComment(currentTime);\n    }\n  };\n\n  const promptComment = (timestamp) => {\n    const comment = prompt('Enter your comment:');\n    if (comment) {\n        const newComment = {\n            timestamp: parseFloat(timestamp),\n            text: comment\n          };\n      setComments((prevComments) => [...prevComments, newComment]);\n    }\n  };\n\n  const handleCommentChange = (event) => {\n    setInputComment(event.target.value);\n  };\n\n  const handleSubmitComment = (event) => {\n    event.preventDefault();\n    if (inputComment.trim() !== '') {\n      const newComment = {\n        timestamp: 0,\n        text: inputComment\n      };\n      setComments((prevComments) => [...prevComments, newComment]);\n      setInputComment('');\n    }\n  };\n\n  const renderComments = () => {\n    return comments.map((comment, index) => (\n      <li key={index}>\n        <a href={`https://www.youtube.com/watch?v=${extractVideoId(videoLink)}&t=${comment.timestamp}`} target=\"_blank\" rel=\"noopener noreferrer\">\n          {comment.text}\n        </a>\n      </li>\n    ));\n  };\n\n  // Helper function to extract video ID from YouTube link\n  const extractVideoId = (link) => {\n    const videoIdMatch = link.match(/(?:[?&]v=|\\/embed\\/|\\/[0-9a-z_-]{11})([0-9a-z_-]{11})/i);\n    const unlistedIdMatch = link.match(/\\/v\\/([0-9a-z_-]{11})/i);\n    return videoIdMatch ? videoIdMatch[1] : unlistedIdMatch ? unlistedIdMatch[1] : null;\n  };\n\n  return (\n    <div>\n      <form onSubmit={handleVideoSubmit}>\n        <input\n          type=\"text\"\n          value={videoLink}\n          onChange={handleVideoLinkChange}\n          placeholder=\"Enter YouTube video link\"\n        />\n        <button type=\"submit\">Load Video</button>\n      </form>\n      <div ref={videoRef}></div>\n      <ul>{renderComments()}</ul>\n      <form onSubmit={handleSubmitComment}>\n        <input\n          type=\"text\"\n          value={inputComment}\n          onChange={handleCommentChange}\n          placeholder=\"Enter your comment\"\n        />\n        <button type=\"submit\">Add Comment</button>\n      </form>\n    </div>\n  );\n};\n\nexport default VideoPlayer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}